version: 2
reference:
  images:
    packet_exec: &packet_exec
      - image: quay.io/hashicorp/packet-exec:master
        auth:
          username: $QUAY_USERNAME
          password: $QUAY_PASSWORD
  environment: &ENVIRONMENT
    SLACK_USERNAME: Vagrant
    SLACK_ICON: https://avatars.slack-edge.com/2017-10-17/257000837696_070f98107cdacc0486f6_36.png
    SLACK_TITLE: Vagrant Packaging
    PACKET_EXEC_PERSIST: 1
    PACKET_EXEC_DEVICE_NAME: installers
    PACKET_EXEC_DEVICE_SIZE: baremetal_1
    PACKET_EXEC_PREFER_FACILITIES: ewr1,iad1,ord1,dfw1,ams1,atl1,lax1,sea1
    PACKET_EXEC_OPERATING_SYSTEM: ubuntu_18_04
    PACKET_EXEC_PRE_BUILTINS: InstallVmware,InstallVagrant,InstallVagrantVmware
  copypasta:
    default_workflow: &DEFAULT_WORKFLOW
      context: vagrant-test
      filters:
        branches:
          ignore: master
        tags:
          only: /.*/

    substrate: &SUBSTRATE
      docker: *packet_exec
      steps:
        - checkout
        - run:
            name: Build substrate
            no_output_timeout: 30m
            command: |
              set +e
              export SLACK_TITLE="Vagrant Packaging - Substrate ${PKT_VAGRANT_ONLY_BOXES}"
              os="${PKT_VAGRANT_ONLY_BOXES%%-*}"
              if [ "${os}" == "osx" ]; then
                os="darwin"
              fi
              arch="${PKT_VAGRANT_ONLY_BOXES##*-}"
              arch="${arch//3/6}"
              if [ "${arch}" != "i686" ]; then
                arch="64"
              fi
              if [ "${os}" == "win" ]; then
                arch=""
              fi
              if [ "${CIRCLE_TAG}" != "" ]; then
                s3_dst="${ASSETS_PRIVATE_BUCKET}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_TAG}/"
              else
                s3_dst="${ASSETS_PRIVATE_LONGTERM}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}/"
              fi
              echo "Checking for existing substrate OS: ${os} ARCH: ${arch}"
              fname=($(aws s3 ls "${s3_dst}" | grep "substrate_${os}.*${arch}.zip" | awk '{print $4}'))
              mkdir -p substrate-assets
              if [ "${fname}" != "" ]; then
                for dname in "${fname[@]}"; do
                  echo "Existing substrate found (${dname}). Downloading..."
                  aws s3 cp "${s3_dst}${dname}" ./substrate-assets/
                done
              else
                echo "Substrate not found - building..."
                echo -e -n "${PACKET_SSH_KEY}" > /tmp/packet-key
                chmod 600 /tmp/packet-key
                export PKT_VAGRANT_BUILD_TYPE="substrate"
                export PACKET_EXEC_REMOTE_DIRECTORY="${CIRCLE_WORKFLOW_ID}"
                packet-exec run -ssh-key /tmp/packet-key -download "./substrate-assets/*:./substrate-assets" -- ./.runner-vmware.sh > /tmp/cmd-output 2>&1 &
                pid=$!
                until [ -f /tmp/cmd-output ]; do
                  sleep 0.1
                done
                tail --quiet --pid $pid -f /tmp/cmd-output &
                wait $pid
                result=$?
                rm /tmp/packet-key
                if [ $result -ne 0 ]; then
                  slack -s error -m "Failed to build Vagrant substrate - ${CIRCLE_JOB}" -f /tmp/cmd-output -T 10
                fi
                exit $result
              fi
        - persist_to_workspace:
            root: .
            paths:
              - ./substrate-assets/*
    package: &PACKAGE
      docker: *packet_exec
      steps:
        - checkout
        - attach_workspace:
            at: .
        - run:
            name: Build packages
            no_output_timeout: 1h
            command: |
              set +e
              export SLACK_TITLE="Vagrant Packaging - Package ${PKT_VAGRANT_ONLY_BOXES}"
              echo -e -n "${PACKET_SSH_KEY}" > /tmp/packet-key
              chmod 600 /tmp/packet-key
              pkg_dir="${CIRCLE_BUILD_NUM}"
              export PKT_VAGRANT_BUILD_TYPE="package"
              export PKT_VAGRANT_INSTALLER_VAGRANT_PACKAGE_OUTPUT_DIR="${pkg_dir}"
              export PACKET_EXEC_REMOTE_DIRECTORY="${CIRCLE_WORKFLOW_ID}"
              packet-exec run -ssh-key /tmp/packet-key -download "./${pkg_dir}/*:./assets" -- ./.runner-vmware.sh > /tmp/cmd-output 2>&1 &
              pid=$!
              until [ -f /tmp/cmd-output ]; do
                sleep 0.1
              done
              tail --quiet --pid $pid -f /tmp/cmd-output &
              wait $pid
              result=$?
              rm /tmp/packet-key
              mkdir -p assets
              if [ $result -ne 0 ]; then
                slack -s error -m "Failed to build Vagrant installer packages" -f /tmp/cmd-output -T 10
              fi
              exit $result
        - persist_to_workspace:
            root: .
            paths:
              - ./assets/*

    upload: &UPLOAD
      environment:
        <<: *ENVIRONMENT
      docker: *packet_exec
      steps:
        - attach_workspace:
            at: .
        - run:
            name: Upload packages
            command: |
              set +e
              if [ "${CIRCLE_TAG}" != "" ]; then
                s3_dst="${ASSETS_PRIVATE_BUCKET}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_TAG}/"
              else
                s3_dst="${ASSETS_PRIVATE_LONGTERM}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}/"
              fi
              mkdir -p assets
              mv ./substrate-assets/* ./assets/
              pushd ./assets
              uploads=""
              for file in * ; do
                aws s3 ls "${s3_dst}${file}"
                if [ $? -ne 0 ]; then
                  aws s3 cp "${file}" "${s3_dst}" > /tmp/cmd-output 2>&1
                  result=$?
                  cat /tmp/cmd-output
                  if [ $result -ne 0 ]; then
                    slack -s error -m "Failed to upload installer asset \`${file}\`" -f /tmp/cmd-output
                    exit 1
                  fi
                  uploads="${uploads}\n${file}"
                fi
              done
              if [ "${uploads}" != "" ]; then
                slack -m "New installer assets available:\n\n${uploads}\n\n>${s3_dst}"
              fi
              exit
jobs:
  load_gem:
    environment:
      <<: *ENVIRONMENT
    docker: *packet_exec
    steps:
      - run:
          name: Fetch Vagrant RubyGem
          command: |
            set +e
            version=$(echo "${CIRCLE_TAG:-master}" | sed 's/^v//')
            aws s3 cp ${ASSETS_PRIVATE_BUCKET}/${CIRCLE_PROJECT_USERNAME}/vagrant/vagrant-${version}.gem vagrant-${version}.gem > /tmp/cmd-output 2>&1
            result=$?
            cat /tmp/cmd-output
            if [ $result -ne 0 ]; then
              slack -s error -m "Failed to download Vagrant RubyGem" -f /tmp/cmd-output
            fi
            exit $result
      - persist_to_workspace:
          root: .
          paths:
            - ./*.gem
  packet_device:
    environment:
      <<: *ENVIRONMENT
    docker: *packet_exec
    steps:
      - run:
          name: Create packet device
          command: |
            set +e
            packet-exec info
            if [ $? -eq 0 ]; then
              exit
            fi
            packet-exec create > /tmp/cmd-output 2>&1 &
            pid=$!
            until [ -f /tmp/cmd-output ]; do
              sleep 0.1
            done
            tail --quiet --pid $pid -f /tmp/cmd-output &
            wait $pid
            if [ $? -ne 0 ]; then
              slack -s error -m "Failed to create remote packet device" -f /tmp/cmd-output
            fi
            exit $result
  start_guests:
    environment:
      <<: *ENVIRONMENT
    docker: *packet_exec
    steps:
      - checkout
      - run:
          name: Start packet guests
          command: |
            set +e
            echo -e -n "${PACKET_SSH_KEY}" > /tmp/packet-key
            chmod 600 /tmp/packet-key
            # package type will start all available guests
            export PACKET_EXEC_REMOTE_DIRECTORY="${CIRCLE_WORKFLOW_ID}"
            export PKT_VAGRANT_BUILD_TYPE="package"
            packet-exec run -ssh-key /tmp/packet-key -upload -- vagrant up --no-provision > /tmp/cmd-output 2>&1 &
            pid=$!
            until [ -f /tmp/cmd-output ]; do
              sleep 0.1
            done
            tail -f --quiet --pid $pid /tmp/cmd-output
            wait $pid
            result=$?
            rm /tmp/packet-key
            if [ $result -ne 0 ]; then
              slack -s error -m "Failed to start builder guests on packet device" -f /tmp/cmd-output -T 10
            fi
            exit $result
  restart_guests:
    environment:
      <<: *ENVIRONMENT
    docker: *packet_exec
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Restart packet guests
          command: |
            set +e
            echo -e -n "${PACKET_SSH_KEY}" > /tmp/packet-key
            chmod 600 /tmp/packet-key
            # package type will start all available guests
            export PKT_VAGRANT_BUILD_TYPE="package"
            export PACKET_EXEC_REMOTE_DIRECTORY="${CIRCLE_WORKFLOW_ID}"
            packet-exec run -ssh-key /tmp/packet-key -- vagrant destroy --force > /tmp/cmd-output 2>&1 &
            pid=$!
            until [ -f /tmp/cmd-output ]; do
              sleep 0.1
            done
            tail -f --quiet --pid $pid /tmp/cmd-output
            wait $pid
            result=$?
            if [ $result -ne 0 ]; then
              slack -s error -m "Failed to destroy builder guests on packet device" -f /tmp/cmd-output -T 10
              exit $result
            fi
            packet-exec run -ssh-key /tmp/packet-key -upload -- vagrant up --no-provision > /tmp/cmd-output 2>&1 &
            pid=$!
            until [ -f /tmp/cmd-output ]; do
              sleep 0.1
            done
            tail -f --quiet --pid $pid /tmp/cmd-output
            wait $pid
            result=$?
            if [ $result -ne 0 ]; then
              slack -s error -m "Failed to start builder guests on packet device" -f /tmp/cmd-output -T 10
            fi
            rm /tmp/packet-key
            exit $result
  load_secrets:
    environment:
      <<: *ENVIRONMENT
    docker: *packet_exec
    steps:
      - run:
          name: Provide secrets
          command: |
            set +e
            echo -e -n "${PACKET_SSH_KEY}" > /tmp/packet-key
            chmod 600 /tmp/packet-key
            export PACKET_EXEC_PRE_BUILTINS="LoadSecrets"
            export PACKET_EXEC_REMOTE_DIRECTORY="${CIRCLE_WORKFLOW_ID}"
            packet-exec run -ssh-key /tmp/packet-key -- "until [ -f .complete ]; do sleep 1; done"
  clean_guests:
    environment:
      <<: *ENVIRONMENT
    docker: *packet_exec
    when: always
    steps:
      - run:
          name: Clean packet guests
          command: |
            set +e
            touch .complete
            echo -e -n "${PACKET_SSH_KEY}" > /tmp/packet-key
            chmod 600 /tmp/packet-key
            unset PACKET_EXEC_PERSIST
            export PACKET_EXEC_REMOTE_DIRECTORY="${CIRCLE_WORKFLOW_ID}"
            export PKT_VAGRANT_BUILD_TYPE="package"
            packet-exec run -ssh-key /tmp/packet-key -- vagrant destroy --force > /tmp/cmd-output 2>&1 &
            pid=$!
            until [ -f /tmp/cmd-output ]; do
              sleep 0.1
            done
            tail -f --quiet --pid $pid /tmp/cmd-output
            wait $pid
            result=$?
            if [ $result -ne 0 ]; then
              slack -s error -m "Failed to destroy builder guests on packet device" -f /tmp/cmd-output -T 10
            fi
            rm /tmp/packet-key
            exit $result
  substrate_centos-6:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: centos-6
    <<: *SUBSTRATE
  substrate_centos-6-i386:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: centos-6-i386
    <<: *SUBSTRATE
  substrate_osx-10.9:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: osx-10.9
    <<: *SUBSTRATE
  substrate_ubuntu-14.04-i386:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: ubuntu-14.04-i386
    <<: *SUBSTRATE
  substrate_ubuntu-14.04:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: ubuntu-14.04
    <<: *SUBSTRATE
  substrate_win-7:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: win-7
    <<: *SUBSTRATE
  package_appimage:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: appimage
    <<: *PACKAGE
  package_archlinux:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: archlinux
    <<: *PACKAGE
  package_centos-6:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: centos-6
    <<: *PACKAGE
  package_centos-6-i386:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: centos-6-i386
    <<: *PACKAGE
  package_osx-10.9:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: osx-10.9
    <<: *PACKAGE
  package_ubuntu-14.04:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: ubuntu-14.04
    <<: *PACKAGE
  package_ubuntu-14.04-i386:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: ubuntu-14.04-i386
    <<: *PACKAGE
  package_win-7:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: win-7
    <<: *PACKAGE
  upload_substrates:
    <<: *UPLOAD
  upload_packages:
    <<: *UPLOAD
workflows:
  version: 2
  package:
    jobs:
      - load_gem:
          <<: *DEFAULT_WORKFLOW
      - packet_device:
          <<: *DEFAULT_WORKFLOW
      - start_guests:
          <<: *DEFAULT_WORKFLOW
          requires:
            - packet_device
      - substrate_centos-6:
          <<: *DEFAULT_WORKFLOW
          requires:
            - start_guests
      - substrate_centos-6-i386:
          <<: *DEFAULT_WORKFLOW
          requires:
            - start_guests
      - substrate_osx-10.9:
          <<: *DEFAULT_WORKFLOW
          requires:
            - start_guests
      - substrate_ubuntu-14.04-i386:
          <<: *DEFAULT_WORKFLOW
          requires:
            - start_guests
      - substrate_ubuntu-14.04:
          <<: *DEFAULT_WORKFLOW
          requires:
            - start_guests
      - substrate_win-7:
          <<: *DEFAULT_WORKFLOW
          requires:
            - start_guests
      - package_appimage:
          <<: *DEFAULT_WORKFLOW
          requires:
            - restart_guests
      - package_archlinux:
          <<: *DEFAULT_WORKFLOW
          requires:
            - restart_guests
      - package_centos-6:
          <<: *DEFAULT_WORKFLOW
          requires:
            - restart_guests
            - substrate_centos-6
      - package_centos-6-i386:
          <<: *DEFAULT_WORKFLOW
          requires:
            - restart_guests
            - substrate_centos-6-i386
      - package_osx-10.9:
          <<: *DEFAULT_WORKFLOW
          requires:
            - restart_guests
            - substrate_osx-10.9
      - package_ubuntu-14.04-i386:
          <<: *DEFAULT_WORKFLOW
          requires:
            - restart_guests
            - substrate_ubuntu-14.04-i386
      - package_ubuntu-14.04:
          <<: *DEFAULT_WORKFLOW
          requires:
            - restart_guests
            - substrate_ubuntu-14.04
      - package_win-7:
          <<: *DEFAULT_WORKFLOW
          requires:
            - restart_guests
            - substrate_win-7
      - load_secrets:
          <<: *DEFAULT_WORKFLOW
          requires:
            - packet_device
      - restart_guests:
          <<: *DEFAULT_WORKFLOW
          requires:
            - load_gem
            - substrate_centos-6
            - substrate_centos-6-i386
            - substrate_osx-10.9
            - substrate_ubuntu-14.04-i386
            - substrate_ubuntu-14.04
            - substrate_win-7
      - upload_substrates:
          <<: *DEFAULT_WORKFLOW
          requires:
            - substrate_centos-6
            - substrate_centos-6-i386
            - substrate_osx-10.9
            - substrate_ubuntu-14.04-i386
            - substrate_ubuntu-14.04
            - substrate_win-7
      - upload_packages:
          <<: *DEFAULT_WORKFLOW
          requires:
            - package_appimage
            - package_archlinux
            - package_centos-6
            - package_centos-6-i386
            - package_osx-10.9
            - package_ubuntu-14.04
            - package_ubuntu-14.04-i386
            - package_win-7
      - clean_guests:
          <<: *DEFAULT_WORKFLOW
          requires:
            - package_appimage
            - package_archlinux
            - package_centos-6
            - package_centos-6-i386
            - package_osx-10.9
            - package_ubuntu-14.04
            - package_ubuntu-14.04-i386
            - package_win-7
