version: 2
reference:
  images:
    aws: &aws_image
      - image: circleci/python:stretch
  environment: &ENVIRONMENT
    packet_exec_version: "0.1.1"
    packet_exec_prefix: s3://vagrant-ci-private/elt/hashicorp/packet-exec/master/2019-05-16/72c9e970
    SLACK_USERNAME: Vagrant
    SLACK_ICON: https://avatars.slack-edge.com/2017-10-17/257000837696_070f98107cdacc0486f6_36.png
    SLACK_TITLE: Vagrant Packaging
    PACKET_EXEC_DEVICE_NAME: installers
    PACKET_EXEC_DEVICE_SIZE: baremetal_1
    PACKET_EXEC_PREFER_FACILITIES: ewr1,iad1,ord1,dfw1,ams1,atl1,lax1,sea1
    PACKET_EXEC_OPERATING_SYSTEM: ubuntu_18_04
    PACKET_EXEC_PRE_BUILTINS: InstallVmware,InstallVagrant,InstallVagrantVmware,LoadSecrets
  copypasta:
    upload: &UPLOAD
      environment:
        <<: *ENVIRONMENT
      docker: *aws_image
      steps:
        - attach_workspace:
            at: .
        - run: sudo pip install awscli
        - run:
            name: Upload packages
            command: |
              set +e
              if [ "${CIRCLE_TAG}" != "" ]; then
                s3_dst="${ASSETS_PRIVATE_BUCKET}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_TAG}/"
              else
                s3_dst="${ASSETS_PRIVATE_LONGTERM}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}/"
              fi
              mkdir -p assets
              mv ./substrate-assets/* ./assets/
              pushd ./assets
              uploads=""
              for file in * ; do
                aws s3 ls "${s3_dst}${file}"
                if [ $? -ne 0 ]; then
                  aws s3 cp "${file}" "${s3_dst}" 2>&1 | tee .output
                  if [ $? -ne 0 ]; then
                    SLACK_STATE=$SLACK_ERROR
                    SLACK_MESSAGE="Failed to upload installer asset \`${file}\`\n\n\`\`\`$(cat .output)\`\`\`"
                    eval $SLACK_EXECUTE
                    exit 1
                  fi
                  uploads="${uploads}\n${file}"
                fi
              done
              if [ "${uploads}" != "" ]; then
                SLACK_MESSAGE="New installers assets available:\n\n${uploads}\n\n  -> ${s3_dst}"
                eval $SLACK_EXECUTE
              fi
              exit


jobs:
  init:
    environment:
      <<: *ENVIRONMENT
    docker: *aws_image
    steps:
      - run: sudo pip install awscli
      - run:
          name: Fetch Vagrant RubyGem
          command: |
            set +e
            version=$(echo "${CIRCLE_TAG:-master}" | sed 's/^v//')
            aws s3 cp ${ASSETS_PRIVATE_BUCKET}/${CIRCLE_PROJECT_USERNAME}/vagrant/vagrant-${version}.gem vagrant-${version}.gem 2>&1 | tee .output
            result=$?
            if [ $result -ne 0 ]; then
              SLACK_STATE=$SLACK_ERROR
              SLACK_MESSAGE="Failed to download Vagrant RubyGem\n\n\`\`\`$(cat .output)\`\`\`"
              eval $SLACK_EXECUTE
            fi
            exit $result
      - run:
          name: Fetch packet-exec
          command: |
            packet_exec_prefix=${packet_exec_prefix:-"${ASSETS_PRIVATE_BUCKET}/hashicorp/packet-exec/v${packet_exec_version}"}
            aws s3 cp ${packet_exec_prefix}/packet-exec_linux_amd64 packet-exec 2>&1 | tee .output
            result=$?
            if [ $result -ne 0 ]; then
              SLACK_STATE=$SLACK_ERROR
              SLACK_MESSAGE="Failed to download packet-exec utility\n\n\`\`\`$(cat .output)\`\`\`"
              eval $SLACK_EXECUTE
            fi
            chmod 755 ./packet-exec
            exit $result
      - persist_to_workspace:
          root: .
          paths:
            - ./*.gem
            - packet-exec
  setup:
    environment:
      <<: *ENVIRONMENT
    docker: *aws_image
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Create packet device
          command: |
            set +e
            ./packet-exec info
            if [ $? -eq 0 ]; then
              exit
            fi
            ./packet-exec create 2>&1 | tee .output
            result=$?
            if [ $result -ne 0 ]; then
              SLACK_STATE=$SLACK_ERROR
              SLACK_MESSAGE="Failed to create remote packet device\n\n\`\`\`$(cat .output)\`\`\`"
              eval $SLACK_EXECUTE
            fi
            exit $result
  substrate:
    environment:
      <<: *ENVIRONMENT
    docker: *aws_image
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build substrates
          no_output_timeout: 30m
          command: |
            set +e
            ls ./substrate-assets/* | grep substrate 2>&1 > /dev/null
            if [ $? -ne 0 ]; then
              echo -e -n "${PACKET_SSH_KEY}" > /tmp/packet-key
              chmod 600 /tmp/packet-key
              export PKT_VAGRANT_BUILD_TYPE="substrate"
              export PKT_PACKET_EXEC_REMOTE_DIRECTORY="${CIRCLE_PROJECT_USERNAME}.${CIRCLE_PROJECT_REPONAME}.${CIRCLE_BUILD_NUM}"
              ./packet-exec run -ssh-key /tmp/packet-key -upload -download "./assets/*:./substrate-assets" -- ./.runner-vmware.sh 2>&1 | tee .output
              result=$?
              rm /tmp/packet-key
              if [ $result -ne 0 ]; then
                SLACK_STATE=$SLACK_ERROR
                SLACK_MESSAGE="Failed to build Vagrant substrates\n\n\`\`\`$(tail .output)\`\`\`"
                eval $SLACK_EXECUTE
              fi
              exit $result
            fi
      - persist_to_workspace:
          root: .
          paths:
            - ./substrate-assets/
  package:
    environment:
      <<: *ENVIRONMENT
    docker: *aws_image
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build packages
          no_output_timeout: 30m
          command: |
            set +e
            echo -e -n "${PACKET_SSH_KEY}" > /tmp/packet-key
            chmod 600 /tmp/packet-key
            export PKT_VAGRANT_BUILD_TYPE="package"
            export PKT_PACKET_EXEC_REMOTE_DIRECTORY="${CIRCLE_PROJECT_USERNAME}.${CIRCLE_PROJECT_REPONAME}.${CIRCLE_BUILD_NUM}"
            ./packet-exec run -ssh-key /tmp/packet-key -upload -download "./assets/*:./assets" -- ./.runner-vmware.sh 2>&1 | tee .output
            result=$?
            rm /tmp/packet-key
            mkdir -p assets
            mv substrate-assets/* assets/
            if [ $result -ne 0 ]; then
              SLACK_STATE=$SLACK_ERROR
              SLACK_MESSAGE="Failed to build Vagrant installer packages\n\n\`\`\`$(tail .output)\`\`\`"
              eval $SLACK_EXECUTE
            fi
            exit $result
      - persist_to_workspace:
          root: .
          paths:
            - ./assets/
  existing_substrates:
    environment:
      <<: *ENVIRONMENT
    docker: *aws_image
    steps:
      - run: sudo pip install awscli
      - run:
          name: Check for existing substrates
          command: |
            set +e
            if [ "${CIRCLE_TAG}" != "" ]; then
              s3_dst="${ASSETS_PRIVATE_BUCKET}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_TAG}/"
            else
              s3_dst="${ASSETS_PRIVATE_LONGTERM}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}/"
            fi
            mkdir -p substrate-assets
            aws s3 ls "${s3_dst}" | grep "substrate"
            if [ $? -eq 0 ]; then
              echo "Downloading existing substrates..."
              aws s3 cp --recursive "${s3_dst}" ./substrate-assets/
            else
              echo "No existing substrates found. (location: ${s3_dst})"
            fi
      - persist_to_workspace:
          root: .
          paths:
            - ./substrate-assets
  upload_substrates:
    <<: *UPLOAD
  upload_packages:
    <<: *UPLOAD
workflows:
  version: 2
  package:
    jobs:
      - init:
          context: vagrant-test
          filters:
            branches:
              ignore: master
            tags:
              only: /.*/
      - setup:
          context: vagrant-test
          requires:
            - init
          filters:
            branches:
              ignore: master
            tags:
              only: /.*/
      - existing_substrates:
          context: vagrant-test
          filters:
            branches:
              ignore: master
            tags:
              only: /.*/
      - substrate:
          context: vagrant-test
          requires:
            - setup
            - existing_substrates
          filters:
            branches:
              ignore: master
            tags:
              only: /.*/
      - upload_substrates:
          context: vagrant-test
          requires:
            - substrate
          filters:
            branches:
              ignore: master
            tags:
              only: /.*/
      - package:
          context: vagrant-test
          requires:
            - setup
            - substrate
          filters:
            branches:
              ignore: master
            tags:
              only: /.*/
      - upload_packages:
          context: vagrant-test
          requires:
            - package
          filters:
            branches:
              ignore: master
            tags:
              only: /.*/
