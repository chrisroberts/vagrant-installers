version: 2
reference:
  images:
    packet_exec: &packet_exec
      - image: quay.io/hashicorp/packet-exec:master
        auth:
          username: $QUAY_USERNAME
          password: $QUAY_PASSWORD
  environment: &ENVIRONMENT
    SLACK_USERNAME: Vagrant
    SLACK_ICON: https://avatars.slack-edge.com/2017-10-17/257000837696_070f98107cdacc0486f6_36.png
    SLACK_TITLE: Vagrant Packaging
    PACKET_EXEC_DEVICE_NAME: installers
    PACKET_EXEC_DEVICE_SIZE: baremetal_1
    PACKET_EXEC_PREFER_FACILITIES: ewr1,iad1,ord1,dfw1,ams1,atl1,lax1,sea1
    PACKET_EXEC_OPERATING_SYSTEM: ubuntu_18_04
    PACKET_EXEC_PRE_BUILTINS: InstallVmware,InstallVagrant,InstallVagrantVmware,LoadSecrets
    PACKET_EXEC_REMOTE_DIRECTORY: "${CIRCLE_PROJECT_USERNAME}.${CIRCLE_PROJECT_REPONAME}.${CIRCLE_BUILD_NUM}"
  copypasta:
    default_workflow: &DEFAULT_WORKFLOW
      context: vagrant-test
      filters:
        branches:
          ignore: master
        tags:
          only: /.*/

    substrate: &SUBSTRATE
      docker: *packet_exec
      steps:
        - checkout
        - attach_workspace:
            at: .
        - run:
            name: Build substrate
            no_output_timeout: 30m
          command: |
            set +e
            os="${guest%%-*}"
            arch="${guest##*-}"
            arch="${arch//3/6}"
            if [ "${arch}" != "i686" ]; then
              arch="64"
            fi
            ls ./substrate-assets/substrate_${os}*${arch}.zip 2>&1 > /dev/null
            if [ $? -ne 0 ]; then
              echo "Substrate not found - building..."
              echo -e -n "${PACKET_SSH_KEY}" > /tmp/packet-key
              chmod 600 /tmp/packet-key
              export PKT_VAGRANT_BUILD_TYPE="substrate"
              packet-exec run -ssh-key /tmp/packet-key -upload -download "./assets/*:./substrate-assets" -- ./.runner-vmware.sh > .output 2>&1 &
              pid=$!
              until [ -f .output ]; do
                sleep 0.1
              done
              tail --quiet --pid $pid -f .output &
              wait $pid
              result=$?
              rm /tmp/packet-key
              if [ $result -ne 0 ]; then
                slack -s error -m "Failed to build Vagrant substrate - ${CIRCLE_JOB}" -f .output -T 5
              fi
              exit $result
            fi
        - persist_to_workspace:
            root: .
            paths:
              - ./substrate-assets/
    package: &PACKAGE
      docker: *packet_exec
      steps:
        - checkout
        - attach_workspace:
            at: .
        - run:
            name: Build packages
            no_output_timeout: 1h
            command: |
              set +e
              echo -e -n "${PACKET_SSH_KEY}" > /tmp/packet-key
              chmod 600 /tmp/packet-key
              export PKT_VAGRANT_BUILD_TYPE="package"
              export PACKET_EXEC_REMOTE_DIRECTORY="${CIRCLE_PROJECT_USERNAME}.${CIRCLE_PROJECT_REPONAME}.${CIRCLE_BUILD_NUM}"
              packet-exec run -ssh-key /tmp/packet-key -upload -download "./assets/*:./assets" -- ./.runner-vmware.sh > .output 2>&1 &
              pid=$!
              until [ -f .output ]; do
                sleep 0.1
              done
              tail --quiet --pid $pid -f .output &
              wait $pid
              result=$?
              rm /tmp/packet-key
              mkdir -p assets
              mv substrate-assets/* assets/
              if [ $result -ne 0 ]; then
                slack -s error -m "Failed to build Vagrant installer packages" -f .output -T 5
              fi
              exit $result
        - persist_to_workspace:
            root: .
            paths:
              - ./assets/

    upload: &UPLOAD
      environment:
        <<: *ENVIRONMENT
      docker: *packet_exec
      steps:
        - attach_workspace:
            at: .
        - run:
            name: Upload packages
            command: |
              set +e
              if [ "${CIRCLE_TAG}" != "" ]; then
                s3_dst="${ASSETS_PRIVATE_BUCKET}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_TAG}/"
              else
                s3_dst="${ASSETS_PRIVATE_LONGTERM}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}/"
              fi
              mkdir -p assets
              mv ./substrate-assets/* ./assets/
              pushd ./assets
              uploads=""
              for file in * ; do
                aws s3 ls "${s3_dst}${file}"
                if [ $? -ne 0 ]; then
                  aws s3 cp "${file}" "${s3_dst}" > .output 2>&1
                  result=$?
                  cat .output
                  if [ $result -ne 0 ]; then
                    slack -s error -m "Failed to upload installer asset \`${file}\`" -f .output
                    exit 1
                  fi
                  uploads="${uploads}\n${file}"
                fi
              done
              if [ "${uploads}" != "" ]; then
                slack -m "New installer assets available:\n\n${uploads}\n\n>${s3_dst}"
              fi
              exit
jobs:
  load_gem:
    environment:
      <<: *ENVIRONMENT
    docker: *packet_exec
    steps:
      - run:
          name: Fetch Vagrant RubyGem
          command: |
            set +e
            version=$(echo "${CIRCLE_TAG:-master}" | sed 's/^v//')
            aws s3 cp ${ASSETS_PRIVATE_BUCKET}/${CIRCLE_PROJECT_USERNAME}/vagrant/vagrant-${version}.gem vagrant-${version}.gem > .output 2>&1
            result=$?
            cat .output
            if [ $result -ne 0 ]; then
              slack -s error -m "Failed to download Vagrant RubyGem" -f .output
            fi
            exit $result
      - persist_to_workspace:
          root: .
          paths:
            - ./*.gem
  packet_device:
    environment:
      <<: *ENVIRONMENT
    docker: *packet_exec
    steps:
      - run:
          name: Create packet device
          command: |
            set +e
            packet-exec info
            if [ $? -eq 0 ]; then
              exit
            fi
            packet-exec create > .output 2>&1 &
            pid=$!
            tail --quiet --pid $pid -f .output &
            wait $pid
            if [ $? -ne 0 ]; then
              slack -s error -m "Failed to create remote packet device" -f .output
            fi
            exit $result
  start_guests:
    environment:
      <<: *ENVIRONMENT
    docker: *packet_exec
    steps:
      - run:
          name: Start packet guests
          command: |
            set +e
            echo -e -n "${PACKET_SSH_KEY}" > /tmp/packet-key
            chmod 600 /tmp/packet-key
            # package type will start all available guests
            export PKT_VAGRANT_BUILD_TYPE="package"
            packet-exec run -ssh-key /tmp/packet-key -upload -- vagrant up --no-provision > .output 2>&1 &
            pid=$!
            until [ -f .output ]; do
              sleep 0.1
            done
            wait $pid
            result=$?
            rm /tmp/packet-key
            if [ $result -ne 0 ]; then
              slack -s error -m "Failed to start builder guests on packet device" -f .output -T 5
            fi
            exit $result
  substrate_centos-6:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: centos-6
    <<: *SUBSTRATE
  substrate_centos-6-i386:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: centos-6-i386
    <<: *SUBSTRATE
  substrate_osx-10.9:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: osx-10.9
    <<: *SUBSTRATE
  substrate_ubuntu-14.04-i386:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: ubuntu-14.04-i386
    <<: *SUBSTRATE
  substrate_ubuntu-14.04:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: ubuntu-14.04
    <<: *SUBSTRATE
  substrate_win-7:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: win-7
    <<: *SUBSTRATE
  package_appimage:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: appimage
    <<: *PACKAGE
  package_archlinux:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: archlinux
    <<: *PACKAGE
  package_centos-6:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: centos-6
    <<: *PACKAGE
  package_centos-6-i386:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: centos-6-i386
    <<: *PACKAGE
  package_osx-10.9:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: osx-10.9
    <<: *PACKAGE
  package_ubuntu-14.04:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: ubuntu-14.04
    <<: *PACKAGE
  package_ubuntu-14.04-i386:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: ubuntu-14.04-i386
    <<: *PACKAGE
  package_win-7:
    environment:
      <<: *ENVIRONMENT
      PKT_VAGRANT_ONLY_BOXES: win-7
    <<: *PACKAGE
  existing_substrates:
    environment:
      <<: *ENVIRONMENT
    docker: *packet_exec
    steps:
      - run:
          name: Check for existing substrates
          command: |
            set +e
            if [ "${CIRCLE_TAG}" != "" ]; then
              s3_dst="${ASSETS_PRIVATE_BUCKET}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_TAG}/"
            else
              s3_dst="${ASSETS_PRIVATE_LONGTERM}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}/"
            fi
            mkdir -p substrate-assets
            aws s3 ls "${s3_dst}" | grep "substrate"
            if [ $? -eq 0 ]; then
              echo "Downloading existing substrates..."
              aws s3 cp --recursive "${s3_dst}" ./substrate-assets/
            else
              echo "No existing substrates found. (location: ${s3_dst})"
            fi
      - persist_to_workspace:
          root: .
          paths:
            - ./substrate-assets
  upload_substrates:
    <<: *UPLOAD
  upload_packages:
    <<: *UPLOAD
workflows:
  version: 2
  package:
    jobs:
      - load_gem:
          <<: *DEFAULT_WORKFLOW
      - packet_device:
          <<: *DEFAULT_WORKFLOW
      - existing_substrates:
          <<: *DEFAULT_WORKFLOW
      - start_guests:
          <<: *DEFAULT_WORKFLOW
          requires:
            - packet_device
      - substrate_centos-6:
          <<: *DEFAULT_WORKFLOW
          requires:
            - start_guests
            - existing_substrates
      - substrate_centos-6-i386:
          <<: *DEFAULT_WORKFLOW
          requires:
            - start_guests
            - existing_substrates
      - substrate_osx-10.9:
          <<: *DEFAULT_WORKFLOW
          requires:
            - start_guests
            - existing_substrates
      - substrate_ubuntu-14.04-i386:
          <<: *DEFAULT_WORKFLOW
          requires:
            - start_guests
            - existing_substrates
      - substrate_ubuntu-14.04:
          <<: *DEFAULT_WORKFLOW
          requires:
            - start_guests
            - existing_substrates
      - substrate_win-7:
          <<: *DEFAULT_WORKFLOW
          requires:
            - start_guests
            - existing_substrates
      - package_appimage:
          <<: *DEFAULT_WORKFLOW
          requires:
            - start_guests
      - package_archlinux:
          <<: *DEFAULT_WORKFLOW
          requires:
            - start_guests
      - package_centos-6:
          <<: *DEFAULT_WORKFLOW
          requires:
            - start_guests
            - substrate_centos-6
      - package_centos-6-i386:
          <<: *DEFAULT_WORKFLOW
          requires:
            - start_guests
            - substrate_centos-6-i386
      - package_osx-10.9:
          <<: *DEFAULT_WORKFLOW
          requires:
            - start_guests
            - substrate_osx-10.9
      - package_ubuntu-14.04-i386:
          <<: *DEFAULT_WORKFLOW
          requires:
            - start_guests
            - substrate_ubuntu-14.04-i386
      - package_ubuntu-14.04:
          <<: *DEFAULT_WORKFLOW
          requires:
            - start_guests
            - substrate_ubuntu-14.04
      - package_win-7:
          <<: *DEFAULT_WORKFLOW
          requires:
            - start_guests
            - substrate_win-7
      - upload_substrates:
          <<: *DEFAULT_WORKFLOW
          requires:
            - substrate_centos-6
            - substrate_centos-6-i386
            - substrate_osx-10.9
            - substrate_ubuntu-14.04-i386
            - substrate_ubuntu-14.04
            - substrate_win-7
      - upload_packages:
          <<: *DEFAULT_WORKFLOW
          requires:
            - package_appimage
            - package_archlinux
            - package_centos-6
            - package_centos-6-i386
            - package_osx-10.9
            - package_ubuntu-14.04
            - package_ubuntu-14.04-i386
            - package_win-7
